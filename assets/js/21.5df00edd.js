(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{395:function(e,t,n){"use strict";n.r(t);var o=n(18),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"faq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[e._v("#")]),e._v(" FAQ")]),e._v(" "),n("p",[e._v("This page provides answers to some frequently asked questions.")]),e._v(" "),n("h2",{attrs:{id:"how-to-create-an-extension-template-in-my-local-machine"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-create-an-extension-template-in-my-local-machine"}},[e._v("#")]),e._v(" How to create an extension template in my local machine")]),e._v(" "),n("p",[e._v("You can use the "),n("code",[e._v("paster")]),e._v(" command in the same way as a source install. To create an extension execute the following command:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('docker-compose -f docker-compose.dev.yml exec ckan-dev /bin/bash -c "paster --plugin=ckan create -t ckanext ckanext-myext -o /srv/app/src_extensions"\n')])])]),n("p",[e._v("This will create an extension template inside the container’s folder "),n("code",[e._v("/srv/app/src_extensions")]),e._v(" which is mapped to your local "),n("code",[e._v("src/")]),e._v(" folder.")]),e._v(" "),n("p",[e._v("Now you can navigate to your local folder "),n("code",[e._v("src/")]),e._v(" and see the extension created by the previous command and open the project in your favorite IDE.")]),e._v(" "),n("h2",{attrs:{id:"how-to-separate-that-extension-in-a-new-git-repository-so-i-can-have-the-independence-to-install-it-in-other-instances"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-separate-that-extension-in-a-new-git-repository-so-i-can-have-the-independence-to-install-it-in-other-instances"}},[e._v("#")]),e._v(" How to separate that extension in a new git repository so I can have the independence to install it in other instances")]),e._v(" "),n("p",[e._v("Crucial thing is to understand that extensions get their repositories on GitHub (or elsewhere). You can first create a repository for extension and later clone in "),n("code",[e._v("src/")]),e._v(" or do opposite as following:")]),e._v(" "),n("ul",[n("li",[e._v("Create the Extension, for example: "),n("code",[e._v("ckanext-myext")]),e._v(".")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('docker-compose -f docker-compose.dev.yml exec ckan-dev /bin/bash -c "paster --plugin=ckan create -t ckanext ckanext-myext -o /srv/app/src_extensions"\n')])])]),n("ul",[n("li",[e._v("Init your new git repository into the extension folder "),n("code",[e._v("src/ckanext-myext")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cd src/ckanext-myext\ngit init\n")])])]),n("ul",[n("li",[e._v("Configure remote/origin")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("git remote add origin <remote_repository_url>\n")])])]),n("ul",[n("li",[e._v("Add your files and push the first commit")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("git add .\ngit commit -m 'Initial Commit'\ngit push\n")])])]),n("p",[n("strong",[e._v("Note:")]),e._v(" The "),n("code",[e._v("src/")]),e._v(" folder is gitignored in "),n("code",[e._v("okfn/docker-ckan")]),e._v(" repository, so initializing new git repositories inside is ok.")]),e._v(" "),n("h2",{attrs:{id:"how-to-quickly-refresh-the-changes-in-my-extension-into-the-dockerized-environment-so-i-can-have-quick-feedback-of-my-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-quickly-refresh-the-changes-in-my-extension-into-the-dockerized-environment-so-i-can-have-quick-feedback-of-my-changes"}},[e._v("#")]),e._v(" How to quickly refresh the changes in my extension into the dockerized environment so I can have quick feedback of my changes")]),e._v(" "),n("p",[e._v("This docker-compose setup for dev environment is already configured so that it sets "),n("code",[e._v("debug=True")]),e._v(" inside configuration file and auto reloads on python and templates related changes. You do not have to reload when making changes to HTML, javascript or configuration files - you just need to refresh the page in the browser.")]),e._v(" "),n("p",[e._v("See the CKAN images section of the "),n("a",{attrs:{href:"https://github.com/okfn/docker-ckan#ckan-images",target:"_blank",rel:"noopener noreferrer"}},[e._v("repository documentation"),n("OutboundLink")],1),e._v(" for more detail")]),e._v(" "),n("h2",{attrs:{id:"how-to-run-tests-for-my-extension-in-the-dockerized-environment-so-i-can-have-a-quick-test-development-cycle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-run-tests-for-my-extension-in-the-dockerized-environment-so-i-can-have-a-quick-test-development-cycle"}},[e._v("#")]),e._v(" How to run tests for my extension in the dockerized environment so I can have a quick test-development cycle")]),e._v(" "),n("p",[e._v("We write and store unit tests inside the "),n("code",[e._v("ckanext/myext/tests")]),e._v(" directory. To run unit tests you need to be running the "),n("code",[e._v("ckan-dev")]),e._v(" service of this docker-compose setup.")]),e._v(" "),n("ul",[n("li",[e._v("Once running, in another terminal window run the test command:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker-compose -f docker-compose.dev.yml exec ckan-dev nosetests --ckan-dev --nologcapture --reset-db -s -v --with-pylons=/srv/app/src_extensions/ckanext-myext/test.ini /srv/app/src_extensions/ckanext-myext/\n")])])]),n("p",[e._v("You can also pass nosetest arguments to debug")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--ipdb --ipdb-failure\n")])])]),n("p",[n("strong",[e._v("Note:")]),e._v(" Right now all tests will be run, it is not possible to choose a specific file or test.")]),e._v(" "),n("h2",{attrs:{id:"how-to-debug-my-methods-in-the-dockerized-environment-so-i-can-have-a-better-understanding-of-whats-going-on-with-my-logic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-debug-my-methods-in-the-dockerized-environment-so-i-can-have-a-better-understanding-of-whats-going-on-with-my-logic"}},[e._v("#")]),e._v(" How to debug my methods in the dockerized environment so I can have a better understanding of whats going on with my logic")]),e._v(" "),n("p",[e._v("To run a container and be able to add a breakpoint with "),n("code",[e._v("pdb")]),e._v(", run the "),n("code",[e._v("ckan-dev")]),e._v(" container with the "),n("code",[e._v("--service-ports")]),e._v(" option:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker-compose -f docker-compose.dev.yml run --service-ports ckan-dev\n")])])]),n("p",[e._v("This will start a new container, displaying the standard output in your terminal. If you add a breakpoint in a source file in the "),n("code",[e._v("src")]),e._v(" folder ("),n("code",[e._v("import pdb; pdb.set_trace()")]),e._v(") you will be able to inspect it in this terminal next time the code is executed.")]),e._v(" "),n("h2",{attrs:{id:"how-to-debug-core-ckan-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-debug-core-ckan-code"}},[e._v("#")]),e._v(" How to debug core CKAN code")]),e._v(" "),n("p",[e._v("Currently, this docker-compose setup doesn’t allow us to debug core CKAN code since it lives inside the container. However, we can do some hacks so the container uses a local clone of the CKAN core hosted in our machine. To do it:")]),e._v(" "),n("ul",[n("li",[e._v("Create a new folder called "),n("code",[e._v("ckan_src")]),e._v(" in this "),n("code",[e._v("docker-ckan")]),e._v(" folder at the same level of the "),n("code",[e._v("src/")])]),e._v(" "),n("li",[e._v("Clone ckan and checkout the version you want to debug/edit")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("git https://github.com/ckan/ckan/ ckan_src\ncd ckan_src\ngit checkout ckan-2.8.3\n")])])]),n("ul",[n("li",[e._v("Edit "),n("code",[e._v("docker-compose.dev.yml")]),e._v(" and add an entry to ckan-dev’s and ckan-worker-dev’s volumes. This will allow the docker container to access the CKAN code hosted in our machine.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("   - ./ckan_src:/srv/app/ckan_src\n")])])]),n("ul",[n("li",[e._v("Create a script in "),n("code",[e._v("ckan/docker-entrypoint.d/z_install_ckan.sh")]),e._v(" to install CKAN inside the container from the cloned repository (instead of the one installed in the Dockerfile)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#!/bin/bash\necho "*********************************************"\necho "overriding with ckan installation with ckan_src"\npip install -e /srv/app/ckan_src\necho "*********************************************"\n')])])]),n("p",[e._v("That’s it. This will install CKAN inside the container in development mode, from the shared folder. Now you can open the "),n("code",[e._v("ckan_src/")]),e._v(" folder from your favorite IDE and start working on CKAN.")])])}),[],!1,null,null,null);t.default=a.exports}}]);