(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{418:function(e,t,a){"use strict";a.r(t);var n=a(18),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dx-user-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dx-user-guide"}},[e._v("#")]),e._v(" DX User Guide")]),e._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("ul",[a("li",[e._v("Access to the cluster (ask the DevOps team about kubeconfig)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://argoproj.github.io/argo-cd/cli_installation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Argo CD CLI"),a("OutboundLink")],1),e._v(" "),a("ul",[a("li",[e._v("Get the executable suitable for your platform from "),a("a",{attrs:{href:"https://github.com/argoproj/argo-cd/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("argo-cd releases"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Copy it in your "),a("code",[e._v("$PATH")]),e._v(" (e.g. "),a("code",[e._v("/usr/local/bin")]),e._v(")\n"),a("ul",[a("li",[e._v("For the rest of this guide, we will assume an executable named "),a("code",[e._v("argocd")])])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"https://cloud.google.com/sdk/docs/downloads-interactive",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Cloud SDK"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://kubernetes.io/docs/tasks/tools/install-kubectl/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubectl"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"recipes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recipes"}},[e._v("#")]),e._v(" Recipes")]),e._v(" "),a("h3",{attrs:{id:"deploy-a-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-a-project"}},[e._v("#")]),e._v(" Deploy a project")]),e._v(" "),a("h4",{attrs:{id:"create-new-project-and-modify-templates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-new-project-and-modify-templates"}},[e._v("#")]),e._v(" Create new project and modify templates")]),e._v(" "),a("p",[e._v("In order to deploy a new project we will need to update DX helm templates per your needs. To make life easier create a new repository for our project and add it as an origin remote to the "),a("a",{attrs:{href:"https://gitlab.com/datopian/experiments/dx-helm-template",target:"_blank",rel:"noopener noreferrer"}},[e._v("dx-helm-template"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[e._v("NOTE: Replace <project-name> with the name of the project you want to create, e.g. “dx-helm-ed”")])]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://gitlab.com/projects/new?namespace_id=5587649",target:"_blank",rel:"noopener noreferrer"}},[e._v("Create a new GitLab repository"),a("OutboundLink")],1),e._v(" for the new deployment")]),e._v(" "),a("li",[e._v("Clone the deployment template and add the new repository as an origin remote\n"),a("blockquote",[a("p",[e._v("<repo-url> is the URL of your new repo")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git clone https://gitlab.com/datopian/experiments/dx-helm-template <project-name>\n$ cd <project-name>\n$ git remote rename origin upstream\n$ git remote add origin <repo-url>\n")])])])]),e._v(" "),a("li",[e._v("Customize the template (more info "),a("a",{attrs:{href:"#template-customization"}},[e._v("here")]),e._v(")")]),e._v(" "),a("li",[e._v("Add and commit your changes to the Git repository"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git add .\n$ git push -u --all origin\n")])])])]),e._v(" "),a("li",[e._v("(optional) Update Helm dependecies:"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd <directory containing chart.yaml>\n$ helm dependency update\n$ cd - && git add . && git push -u --all origin\n")])])])])]),e._v(" "),a("h4",{attrs:{id:"create-tokens-and-connect-to-argo-cd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-tokens-and-connect-to-argo-cd"}},[e._v("#")]),e._v(" Create Tokens and connect to Argo CD")]),e._v(" "),a("p",[e._v("Time to create Argo CD application in order to continiously deploy new project. For that we need to connect to Argo CD, reserve a new namspace in kubernetes cluster, and get deploy tokens from Gitlab:")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Create a read-only Deploy Token for the new repository (Settings > Repository > Deploy Tokens).")])]),e._v(" "),a("li",[a("p",[e._v("Connect to the remote Argo CD and login using the CLI:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl port-forward service/my-release-argocd-server 8080:80\n$ argocd login localhost:8080\n")])])]),a("p",[e._v("If everything went well, you should be able to run "),a("code",[e._v("argocd proj list")]),e._v(" next and see a list of all the projects.")])]),e._v(" "),a("li",[a("p",[e._v("Create a new, single "),a("code",[e._v("dev")]),e._v(" environment project in Argo CD ("),a("a",{attrs:{href:"#multiple-environments-deployment"}},[e._v("see the Appendix")]),e._v(" for more examples and info regarding environments, e.g. staging, prod, etc.):")]),e._v(" "),a("blockquote",[a("p",[e._v("<name> is the name of the project"),a("br"),e._v("\n<token-user> and <token-pasword> are the token values from GitLab"),a("br"),e._v("\n<project-path> is the GitLab path, e.g. datopian/experiments/dx-helm-something")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ argocd proj create <name> \\\n--dest https://kubernetes.default.svc,<name>-dev \\\n--src https://<token-user>:<token-password>@gitlab.com/<project-path>.git\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Create a Kubernetes namespace (for multiple environments "),a("a",{attrs:{href:"#multiple-environments-deployment"}},[e._v("see the Appendix")]),e._v(", we will assume a single "),a("code",[e._v("dev")]),e._v(" environment):")]),e._v(" "),a("blockquote",[a("p",[e._v("<name> is the name of the project")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl create namespace <name>-dev\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Create an Argo CD Application:")]),e._v(" "),a("blockquote",[a("p",[e._v("<name> is the name of the project")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ argocd app create <name>-dev \\\n--repo https://<token_user>:<token_password>@gitlab.com/<project_path>.git \\\n--path <name> \\\n--project <name> \\\n--values values.yaml \\\n--sync-policy automated \\\n--auto-prune \\\n--self-heal \\\n--dest-server https://kubernetes.default.svc \\\n--dest-namespace <name>-dev \\\n--server localhost:8080\n")])])])])]),e._v(" "),a("h4",{attrs:{id:"add-dns-and-create-certificates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-dns-and-create-certificates"}},[e._v("#")]),e._v(" Add DNS and create certificates")]),e._v(" "),a("ol",[a("li",[e._v("Add a DNS entry for the project, as defined in the "),a("code",[e._v("values.yaml")]),e._v(" file(s).")]),e._v(" "),a("li",[e._v("After you have your new app address defined in DNS, you have to "),a("a",{attrs:{href:"https://gitlab.com/datopian/tech/devops/-/blob/master/quickstart-guide-to-cert-manager-in-k8s.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("create certificate"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"template-customization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#template-customization"}},[e._v("#")]),e._v(" Template customization")]),e._v(" "),a("h3",{attrs:{id:"file-system-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-system-structure"}},[e._v("#")]),e._v(" File system structure")]),e._v(" "),a("p",[e._v("Rename the top level directory to match your project name (without environment name, e.g. "),a("code",[e._v("py-project")]),e._v(", not "),a("code",[e._v("py-project-staging")]),e._v(").")]),e._v(" "),a("h3",{attrs:{id:"chart-yaml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chart-yaml"}},[e._v("#")]),e._v(" Chart.yaml")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(" - the name of the project")]),e._v(" "),a("li",[a("code",[e._v("description")]),e._v(" - the description")])]),e._v(" "),a("h3",{attrs:{id:"values-yaml-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values-yaml-files"}},[e._v("#")]),e._v(" Values YAML files")]),e._v(" "),a("p",[e._v("Each environment you deploy should have a specific values.<env-name>.yaml file, e.g. values.staging.yaml."),a("br"),e._v("\nThese files will be used when creating the environments within the cluster.")]),e._v(" "),a("p",[e._v("For now, we store all secret environment variables in the "),a("code",[e._v("env.ckan")]),e._v(" key, and we’re not going to use "),a("code",[e._v("sealedSecrets")]),e._v("."),a("br"),e._v("\nWe are currently working towards a better / easier to use implementation which would avoid plain text storing of variables.")]),e._v(" "),a("h2",{attrs:{id:"changing-dependency-versions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changing-dependency-versions"}},[e._v("#")]),e._v(" Changing dependency versions")]),e._v(" "),a("h3",{attrs:{id:"solr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solr"}},[e._v("#")]),e._v(" Solr")]),e._v(" "),a("p",[e._v("The default Solr version in our CKAN template is 6.6.6, which is newer than what some "),a("code",[e._v("ckan.io")]),e._v(" instances are using. In some cases, you will want to run the earlier 5.5.5 version, to ensure compatibility with the existing code. In order to do that, you need to clone the source chart for DX CKAN, modify it and rebuild as a dependency of your project.")]),e._v(" "),a("ol",[a("li",[e._v("Clone the source chart in a directory the same level with your project"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git clone git@gitlab.com:datopian/experiments/dx-helm-ckan\n$ cd dx-helm-ckan\n")])])])]),e._v(" "),a("li",[e._v("Adjust the image.tag property in CKAN’s values.yaml"),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("solr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 5.5.5\n\n")])])])]),e._v(" "),a("li",[e._v("Build and update dependecies in your project"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ../<project-directory>\n$ helm dependency build\n$ helm dependency update\n")])])])]),e._v(" "),a("li",[e._v("Commit the update and push"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git commit -am 'Downgrade Solr to 5.5.5'\n")])])])]),e._v(" "),a("li",[e._v("Profit! (i.e. go to Argo CD interface and watch the new Solr image being deployed)")])]),e._v(" "),a("h2",{attrs:{id:"post-installation-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-installation-tasks"}},[e._v("#")]),e._v(" Post Installation tasks")]),e._v(" "),a("p",[e._v("In order to have everything set up and running, there are some (still) manual steps needed to make sure everything is deployed correctly:")]),e._v(" "),a("h3",{attrs:{id:"solr-initialization-6-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solr-initialization-6-x"}},[e._v("#")]),e._v(" Solr initialization (6.x)")]),e._v(" "),a("p",[e._v("First get an archive of the Solr init package from CKAN Cloud Operator:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd /tmp\n$ curl -L -o master.zip http://github.com/datopian/ckan-cloud-operator/zipball/master/\n$ unzip -d ckan-cloud-operator master.zip\n$ cd /tmp/ckan-cloud-operator/datopian-ckan-cloud-operator-1d09aeb/ckan_cloud_operator/data/solr/ckan_default\n$ zip -r - * > /tmp/ckan_default.zip\n")])])]),a("p",[e._v("In order to Initialize Solr you need to identify a pod running Solr, send it the zip file then connect to it:")]),e._v(" "),a("blockquote",[a("p",[e._v("<namespace> is a keyword to group your project assets under, e.g. montreal"),a("br"),e._v("\n<pod-name> is the name of the pod obtained by kubectl")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl get pods -n <namespace>\n$ kubectl cp -n <namespace> /tmp/ckan_default.zip <pod-name>:/tmp\n$ kubectl exec -it -n <namespace> <pod-name> -- bash\n")])])]),a("p",[e._v("Once you’ve logged in, push the transferred zip file to Solr:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ curl -X POST \\\n--header "Content-Type:application/octet-stream" \\\n--data-binary @- \\\n"http://localhost:8983/solr/admin/configs?action=UPLOAD&name=ckan_28_default" < /tmp/ckan_default.zip\n\n$ curl -v "http://localhost:8983/solr/admin/collections?action=CREATE&name=ckan&collection.configName=ckan_28_default&replicationFactor=3&numShards=1"\n')])])]),a("h3",{attrs:{id:"ckan-database-initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ckan-database-initialization"}},[e._v("#")]),e._v(" CKAN database initialization")]),e._v(" "),a("p",[e._v("Same as with Solr, you need to identfy the CKAN pod and connect to it:")]),e._v(" "),a("blockquote",[a("p",[e._v("<namespace> is a keyword to group your project assets under, e.g. montreal"),a("br"),e._v("\n<pod-name> is the name of the pod obtained by kubectl")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl get pods -n <namespace>\n$ kubectl exec -it -n <namespace> <pod-name> -- bash\n")])])]),a("p",[e._v("Then run the init script manually inside the pod:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ paster --plugin=ckan db init --config=production.ini\n\n# others, e.g. validation extension\n$ paster --plugin=ckanext-validation validation init-db --config=production.ini\n")])])]),a("p",[e._v("Last, create a sysadmin user (or more users, as you wish):")]),e._v(" "),a("blockquote",[a("p",[e._v("<username> is the name used by CKAN to identify the user"),a("br"),e._v("\n<email> is the email used by CKAN to identify the user"),a("br"),e._v("\n<display-name> is how the user’s name should be displayed in CKAN"),a("br"),e._v("\n<password> is the chosen password for the user to create")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ paster --plugin=ckan sysadmin \\\nadd <username> email=<email> name=<display-name> password=<password> \\\n--config=production.ini\n")])])]),a("p",[e._v("Any other "),a("code",[e._v("paster")]),e._v(" operations or other CLI CKAN operations could be done at this point.")]),e._v(" "),a("h3",{attrs:{id:"debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),a("h4",{attrs:{id:"argo-cd-ui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#argo-cd-ui"}},[e._v("#")]),e._v(" Argo CD UI")]),e._v(" "),a("p",[e._v("You get a real time overview of a deployed app if you click on it. Here are some things worth noting:")]),e._v(" "),a("ol",[a("li",[e._v("The items on the “map” are of different kinds: services, pods, ingresses, configmaps etc. To view them as a list or simplified map, check the top-right icons left to the logout control.")]),e._v(" "),a("li",[e._v("The items named “StatefulSet”, abbreviated "),a("code",[e._v("sts")]),e._v(", are controlling pod replicas. You can click on them and you get to see a “Live manifest” for k8s, which you can modify and save. This is the equivalent of editing the manifests with "),a("code",[e._v("kubectl")]),e._v(", meaning in order to apply the new configuration you need to delete the replica pods (follow the arrows).")]),e._v(" "),a("li",[e._v("You can easily access real time logs by clicking on any pod and then on the “Logs” tab!")])]),e._v(" "),a("h4",{attrs:{id:"kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl"}},[e._v("#")]),e._v(" kubectl")]),e._v(" "),a("p",[e._v("Small cheatsheet to get things done with "),a("code",[e._v("kubectl")]),e._v(":")]),e._v(" "),a("blockquote",[a("p",[e._v("<namespace> is a keyword to group your project assets under, e.g. montreal"),a("br"),e._v("\n<pod-name> is the name of the pod obtained by kubectl")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get a list of all the namespace names")]),e._v("\n$ kubectl get ns\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get a list of all the pod names in <namespace>")]),e._v("\n$ kubectl get pods -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get a real time log view of a pod")]),e._v("\n$ kubectl logs -f -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get previous logs (e.g. useful when your container keeps restarting)")]),e._v("\n$ kubectl logs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" --previous\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get a shell inside a pod")]),e._v("\n$ kubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If it doesn't work, maybe `bash` is not present as a shell!")]),e._v("\n$ kubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n\n")])])]),a("h2",{attrs:{id:"updating-deployed-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-deployed-code"}},[e._v("#")]),e._v(" Updating deployed code")]),e._v(" "),a("p",[e._v("If you already deployed your application to the DX cluster (congratulations, BTW!), you might want to update the running code, i.e. pushing a new release. This usually involves rebuilding the image and recreating the pods:")]),e._v(" "),a("ol",[a("li",[e._v("Change the cloud image source code if needed in your project’s GitLab repository.")]),e._v(" "),a("li",[e._v("Run the build pipeline so it produces a new image.")]),e._v(" "),a("li",[e._v("Rebuild the running CKAN pods by simply deleting them (either via Argo UI or "),a("code",[e._v("kubectl")]),e._v("). See "),a("a",{attrs:{href:"#debugging"}},[e._v("above")]),e._v(" for how to do that.")])]),e._v(" "),a("h2",{attrs:{id:"updating-ckan-helm-chart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-ckan-helm-chart"}},[e._v("#")]),e._v(" Updating CKAN Helm Chart")]),e._v(" "),a("p",[e._v("In Helm’s model, dependencies are vendorized and commited together with the source code of a Helm Chart. If you’re interested in the latest version of a dependency – for instance, "),a("a",{attrs:{href:"https://gitlab.com/datopian/experiments/dx-helm-ckan",target:"_blank",rel:"noopener noreferrer"}},[e._v("CKAN’s chart"),a("OutboundLink")],1),e._v(" – you need to explicitly tell Helm to pull the updates.")]),e._v(" "),a("ol",[a("li",[e._v("Clone "),a("a",{attrs:{href:"https://gitlab.com/datopian/experiments/dx-helm-ckan",target:"_blank",rel:"noopener noreferrer"}},[e._v("dx-helm-ckan"),a("OutboundLink")],1),e._v(" in the same folder as your Helm Chart (e.g., dx-helm-nhs).")]),e._v(" "),a("li",[e._v("From the "),a("code",[e._v("dx-helm-nhs")]),e._v(" folder, run "),a("code",[e._v("helm dependency update nhs")]),e._v(", where "),a("code",[e._v("nhs")]),e._v(" is the name of your Helm Chart.")]),e._v(" "),a("li",[e._v("Commit the updated chart (as "),a("code",[e._v("nhs/charts/ckan-0.1.0.tgz")]),e._v(").")])]),e._v(" "),a("h2",{attrs:{id:"rolling-back-a-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rolling-back-a-release"}},[e._v("#")]),e._v(" Rolling back a release")]),e._v(" "),a("p",[e._v("For rolling back changes made to either Helm Chart or application code, you should write and push a new commit. Due to implementation details of Kubernetes, you might have to manually restart services (you can do that via Argo CD). For instance, if your application reads environment variables only on startup, it won’t matter if Kubernetes replaced them while it’s running. You should delete all running pods using them and Kubernetes should start recreating everything.")]),e._v(" "),a("hr"),e._v(" "),a("hr"),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"appendix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#appendix"}},[e._v("#")]),e._v(" Appendix")]),e._v(" "),a("h3",{attrs:{id:"managing-access-with-gcloud-and-kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managing-access-with-gcloud-and-kubectl"}},[e._v("#")]),e._v(" Managing access with gcloud and kubectl")]),e._v(" "),a("p",[e._v("Assuming you have already been granted access to the cluster, this mini-guide will assist you setting up "),a("code",[e._v("kubectl")]),e._v(" to operate the k8s node.")]),e._v(" "),a("ol",[a("li",[e._v("Run "),a("code",[e._v("gcloud init")])])]),e._v(" "),a("ul",[a("li",[e._v("Assuming you never used it before, follow the wizard and log in\n"),a("ul",[a("li",[e._v("This will open a browser authorization window")])])]),e._v(" "),a("li",[e._v("You will be prompted a list of all your projects, choose "),a("code",[e._v("datopian-dx")])]),e._v(" "),a("li",[e._v("Do not go into Region and Zone selection, as it doesn’t contain the value we are looking for.\n"),a("ul",[a("li",[e._v("However, if you already got in, don’t panic. Just pick the value closest to what’s "),a("a",{attrs:{href:"https://console.cloud.google.com/kubernetes/list?project=datopian-dx&organizationId=285806390298",target:"_blank",rel:"noopener noreferrer"}},[e._v("on this page"),a("OutboundLink")],1),e._v(" - it should probably be "),a("code",[e._v("europe-west1-d")])])])])]),e._v(" "),a("ol",[a("li",[e._v("Configure "),a("code",[e._v("kubectl")]),e._v(" for access (note the manually assigned zone)")])]),e._v(" "),a("ul",[a("li",[e._v("Run "),a("code",[e._v("gcloud container clusters get-credentials ckan-cloud-cluster --zone=europe-west1")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  $ gcloud container clusters get-credentials ckan-cloud-cluster --zone=europe-west1\n  Fetching cluster endpoint and auth data.\n  kubeconfig entry generated for ckan-cloud-cluster.\n\n")])])]),a("p",[e._v("That’s it, now any "),a("code",[e._v("kubectl")]),e._v(" command will be issued in the context of the DX k8s project!")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Official guide here"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"connecting-to-services-in-the-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connecting-to-services-in-the-cluster"}},[e._v("#")]),e._v(" Connecting to services in the cluster")]),e._v(" "),a("p",[e._v("In order to connect to the various services running in the cluster, you need forward their exposed port to your local environment using "),a("code",[e._v("kubectl")]),e._v(". Here’s how:")]),e._v(" "),a("ul",[a("li",[e._v("Get a list of all running services: "),a("code",[e._v("kubectl get services")]),e._v(" "),a("ul",[a("li",[e._v("If your service is running within a namespace, first obtain its name, then use it in the command:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ kubectl get ns\n<list of namespaces here>\n$ kubectl get services -n ed-dev\n<list of services running inside "ed-dev" namespace>\n')])])])]),e._v(" "),a("li",[e._v("To get a local endpoint to the chosen service, use "),a("code",[e._v("kubectl")]),e._v(":"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl port-forward service/my-service-name \\\n[-n <namespace>] <local-port>:<service-port>\n")])])])])]),e._v(" "),a("p",[e._v("For example, to connect to a running Argo CD service inside the cluster:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl port-forward service/my-release-argocd-server 8080:80\n")])])]),a("p",[e._v("This will forward service’s port 80 to your local port 8080, so opening your browser and pointing it to "),a("a",{attrs:{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1),e._v(" will hit the Argo CD instance running in the cluster.")]),e._v(" "),a("p",[e._v("The current credentials are:")]),e._v(" "),a("p",[a("strong",[e._v("Username:")]),e._v(" "),a("code",[e._v("admin")]),a("br"),e._v(" "),a("strong",[e._v("Password:")]),e._v(" The name of the pod running Argo CD")]),e._v(" "),a("h3",{attrs:{id:"multiple-environments-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-environments-deployment"}},[e._v("#")]),e._v(" Multiple environments deployment")]),e._v(" "),a("p",[e._v("In order to have multiple environments, you need to define a few resources more, one for each extra environment you need:")]),e._v(" "),a("ul",[a("li",[e._v("k8s paths"),a("br"),e._v("\ne.g. "),a("code",[e._v("--dest https://kubernetes.default.svc,ed-dev")])]),e._v(" "),a("li",[e._v("k8s namespaces"),a("br"),e._v("\ne.g. "),a("code",[e._v("kubectl create namespace ed-dev")])]),e._v(" "),a("li",[e._v("Argo CD applications"),a("br"),e._v("\ne.g. "),a("code",[e._v("argocd app create ed-dev [...]")])]),e._v(" "),a("li",[e._v("(optional, recommended) have one values.ENV.yaml file per environment"),a("br"),e._v("\n(the order in which you declare the values.yaml files is also the order they override each other)")])]),e._v(" "),a("blockquote",[a("p",[e._v("Replace <name> with the name of the project"),a("br"),e._v("\nReplace <TOKEN_USER> and <TOKEN_PASSWORD> with the values from GitLab"),a("br"),e._v("\nReplace <PROJECT_PATH> with the GitLab path, e.g. datopian/experiments/dx-helm-something")])]),e._v(" "),a("p",[e._v("Example:")]),e._v(" "),a("blockquote",[a("p",[e._v("<name> is the name of the project"),a("br"),e._v("\n<token-user> and <token-pasword> are the token values from GitLab"),a("br"),e._v("\n<project-path> is the GitLab path, e.g. datopian/experiments/dx-helm-something")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ argocd proj create <name> \\\n--dest https://kubernetes.default.svc,<name>-staging \\\n--dest https://kubernetes.default.svc,<name>-production \\\n--src https://<token-user>:<token-password>@gitlab.com/<project-path>.git\n")])])]),a("p",[e._v("Kubernetes namespaces:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl create namespace <name>-staging\n$ kubectl create namespace <name>-production\n")])])]),a("p",[e._v("Argo CD application for "),a("code",[e._v("staging")]),e._v(" env:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ argocd app create <name>-staging \\\n--repo https://<token-user>:<token-password>@gitlab.com/<project-path>.git \\\n--path <name> \\\n--project <name> \\\n--values values.yaml \\\n--values values.staging.yaml \\\n--sync-policy automated \\\n--auto-prune \\\n--dest-server https://kubernetes.default.svc \\\n--dest-namespace <name>-staging \\\n--server localhost:8080\n\n")])])]),a("p",[e._v("Argo CD application for "),a("code",[e._v("production")]),e._v(" env:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ argocd app create <name>-production \\\n--repo https://<token-user>:<token-password>@gitlab.com/<project-path>.git \\\n--path <name> \\\n--project <name> \\\n--values values.yaml \\\n--values values.production.yaml \\\n--sync-policy automated \\\n--auto-prune \\\n--dest-server https://kubernetes.default.svc \\\n--dest-namespace <name>-production \\\n--server localhost:8080\n")])])]),a("hr"),e._v(" "),a("hr"),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[e._v("#")]),e._v(" Glossary")]),e._v(" "),a("h3",{attrs:{id:"argo-cd-google-cloud-and-kubernetes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#argo-cd-google-cloud-and-kubernetes"}},[e._v("#")]),e._v(" Argo CD, Google Cloud and Kubernetes")]),e._v(" "),a("p",[a("strong",[e._v("Argo CD")]),e._v(" is a declarative, GitOps continuous delivery tool for Kubernetes."),a("br"),e._v("\nMore info on the "),a("a",{attrs:{href:"https://argoproj.github.io/argo-cd/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Argo CD website"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("Google Computing Services")]),e._v(", "),a("strong",[e._v("Google Compute Platform")]),e._v(" or more commonly "),a("strong",[e._v("Google Cloud")]),e._v(" is Google’s infrastructure-as-a-service solution that Datopian is using. See more on the GC "),a("a",{attrs:{href:"https://cloud.google.com/docs/overview/cloud-platform-services",target:"_blank",rel:"noopener noreferrer"}},[e._v("about age"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes"),a("OutboundLink")],1),e._v(", also written as k8s, is an open-source container-orchestration system for automating computer application deployment, scaling, and management. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation.")]),e._v(" "),a("h3",{attrs:{id:"argo-cd-taxonomy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#argo-cd-taxonomy"}},[e._v("#")]),e._v(" Argo CD taxonomy")]),e._v(" "),a("h4",{attrs:{id:"application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#application"}},[e._v("#")]),e._v(" Application")]),e._v(" "),a("p",[e._v("A group of Kubernetes resources as defined by a manifest. This is a Custom Resource Definition (CRD).")]),e._v(" "),a("h4",{attrs:{id:"project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project"}},[e._v("#")]),e._v(" Project")]),e._v(" "),a("p",[e._v("The AppProject CRD is the Kubernetes resource object representing a logical grouping of applications.")]),e._v(" "),a("h4",{attrs:{id:"sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync"}},[e._v("#")]),e._v(" Sync")]),e._v(" "),a("p",[e._v("The process of making an application move to its target state. E.g. by applying changes to a Kubernetes cluster.")]),e._v(" "),a("h4",{attrs:{id:"sync-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-status"}},[e._v("#")]),e._v(" Sync Status")]),e._v(" "),a("p",[e._v("Whether or not the live state matches the target state. Is the deployed application the same as Git says it should be?")]),e._v(" "),a("p",[a("small",[a("a",{attrs:{href:"https://argoproj.github.io/argo-cd/core_concepts/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More info"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"kubernetes-key-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-key-concepts"}},[e._v("#")]),e._v(" Kubernetes key concepts")]),e._v(" "),a("h4",{attrs:{id:"namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[e._v("#")]),e._v(" Namespace")]),e._v(" "),a("p",[e._v("Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called namespaces.")]),e._v(" "),a("p",[e._v("Namespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces. Namespaces cannot be nested inside one another and each Kubernetes resource can only be in one namespace.")]),e._v(" "),a("p",[e._v("Namespaces are a way to divide cluster resources between multiple users (via resource quota).")]),e._v(" "),a("p",[a("small",[a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More info"),a("OutboundLink")],1)])]),e._v(" "),a("h4",{attrs:{id:"pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod"}},[e._v("#")]),e._v(" Pod")]),e._v(" "),a("p",[e._v("Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.")]),e._v(" "),a("p",[e._v("A Pod (as in a pod of whales or pea pod) is a group of one or more containers, with shared storage/network resources, and a specification for how to run the containers. A Pod’s contents are always co-located and co-scheduled, and run in a shared context. A Pod models an application-specific “logical host”: it contains one or more application containers which are relatively tightly coupled. In non-cloud contexts, applications executed on the same physical or virtual machine are analogous to cloud applications executed on the same logical host.")]),e._v(" "),a("p",[a("small",[a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/workloads/pods/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More info"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"deploy-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-tokens"}},[e._v("#")]),e._v(" Deploy Tokens")]),e._v(" "),a("p",[e._v("Deploy Tokens allow access to packages, your repository, and registry images. They are single use credentials that allow the user to fine tune the level of access for each application using the designed GitLab access.")]),e._v(" "),a("p",[e._v("For deployment we normally only need read only access to the repository. In order to do that, the following boxes need to be ticked when creating a Deploy Token:")]),e._v(" "),a("ul",[a("li",[e._v("read_repository")]),e._v(" "),a("li",[e._v("read_registry")]),e._v(" "),a("li",[e._v("read_package_registry")])]),e._v(" "),a("p",[a("small",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/deploy_tokens/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More info"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" DNS")]),e._v(" "),a("p",[e._v("By default, in Datopian DNS entries are handled by Cloudflare.")])])}),[],!1,null,null,null);t.default=s.exports}}]);